# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._inputs import *

__all__ = ['GitlabRunnerAwsaArgs', 'GitlabRunnerAwsa']

@pulumi.input_type
class GitlabRunnerAwsaArgs:
    def __init__(__self__, *,
                 gitlab_runner_token: pulumi.Input[str],
                 gitlab_url: pulumi.Input[str],
                 machine_idle_nodes: pulumi.Input[int],
                 machine_idle_time_second: pulumi.Input[int],
                 machine_instance_type: pulumi.Input[str],
                 machine_max_builds: pulumi.Input[int],
                 runner_max_concurrent_build: pulumi.Input[int],
                 subnet_id: pulumi.Input[str],
                 cache: Optional[pulumi.Input['S3CacheArgs']] = None,
                 default_docker_image: Optional[pulumi.Input[str]] = None,
                 gitlab_helper_image: Optional[pulumi.Input[str]] = None,
                 machine_tags: Optional[pulumi.Input['TagMapArgs']] = None,
                 machine_volume: Optional[pulumi.Input['VolumeArgsArgs']] = None,
                 tags: Optional[pulumi.Input['TagMapArgs']] = None):
        """
        The set of arguments for constructing a GitlabRunnerAwsa resource.
        :param pulumi.Input[str] gitlab_runner_token: The Gitlab Runner token.
        :param pulumi.Input[str] gitlab_url: The Gitlab URL.
        :param pulumi.Input[int] machine_idle_nodes: Number of iddle machines.
        :param pulumi.Input[int] machine_idle_time_second: Number of seconds a machine in idle mode after it's remove.
        :param pulumi.Input[str] machine_instance_type: Machine instance type.
        :param pulumi.Input[int] machine_max_builds: Maximum number of build a machine will run (machine is re-created after reach this number).
        :param pulumi.Input[int] runner_max_concurrent_build: Max concurrent build.
        :param pulumi.Input[str] subnet_id: The Subnet ID.
        :param pulumi.Input[str] gitlab_helper_image: Gitlab Runner helper image (default: gitlab-runner-helper:x86_64-latest).
        """
        pulumi.set(__self__, "gitlab_runner_token", gitlab_runner_token)
        pulumi.set(__self__, "gitlab_url", gitlab_url)
        pulumi.set(__self__, "machine_idle_nodes", machine_idle_nodes)
        pulumi.set(__self__, "machine_idle_time_second", machine_idle_time_second)
        pulumi.set(__self__, "machine_instance_type", machine_instance_type)
        pulumi.set(__self__, "machine_max_builds", machine_max_builds)
        pulumi.set(__self__, "runner_max_concurrent_build", runner_max_concurrent_build)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if cache is not None:
            pulumi.set(__self__, "cache", cache)
        if default_docker_image is not None:
            pulumi.set(__self__, "default_docker_image", default_docker_image)
        if gitlab_helper_image is not None:
            pulumi.set(__self__, "gitlab_helper_image", gitlab_helper_image)
        if machine_tags is not None:
            pulumi.set(__self__, "machine_tags", machine_tags)
        if machine_volume is not None:
            pulumi.set(__self__, "machine_volume", machine_volume)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="gitlabRunnerToken")
    def gitlab_runner_token(self) -> pulumi.Input[str]:
        """
        The Gitlab Runner token.
        """
        return pulumi.get(self, "gitlab_runner_token")

    @gitlab_runner_token.setter
    def gitlab_runner_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "gitlab_runner_token", value)

    @property
    @pulumi.getter(name="gitlabUrl")
    def gitlab_url(self) -> pulumi.Input[str]:
        """
        The Gitlab URL.
        """
        return pulumi.get(self, "gitlab_url")

    @gitlab_url.setter
    def gitlab_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "gitlab_url", value)

    @property
    @pulumi.getter(name="machineIdleNodes")
    def machine_idle_nodes(self) -> pulumi.Input[int]:
        """
        Number of iddle machines.
        """
        return pulumi.get(self, "machine_idle_nodes")

    @machine_idle_nodes.setter
    def machine_idle_nodes(self, value: pulumi.Input[int]):
        pulumi.set(self, "machine_idle_nodes", value)

    @property
    @pulumi.getter(name="machineIdleTimeSecond")
    def machine_idle_time_second(self) -> pulumi.Input[int]:
        """
        Number of seconds a machine in idle mode after it's remove.
        """
        return pulumi.get(self, "machine_idle_time_second")

    @machine_idle_time_second.setter
    def machine_idle_time_second(self, value: pulumi.Input[int]):
        pulumi.set(self, "machine_idle_time_second", value)

    @property
    @pulumi.getter(name="machineInstanceType")
    def machine_instance_type(self) -> pulumi.Input[str]:
        """
        Machine instance type.
        """
        return pulumi.get(self, "machine_instance_type")

    @machine_instance_type.setter
    def machine_instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "machine_instance_type", value)

    @property
    @pulumi.getter(name="machineMaxBuilds")
    def machine_max_builds(self) -> pulumi.Input[int]:
        """
        Maximum number of build a machine will run (machine is re-created after reach this number).
        """
        return pulumi.get(self, "machine_max_builds")

    @machine_max_builds.setter
    def machine_max_builds(self, value: pulumi.Input[int]):
        pulumi.set(self, "machine_max_builds", value)

    @property
    @pulumi.getter(name="runnerMaxConcurrentBuild")
    def runner_max_concurrent_build(self) -> pulumi.Input[int]:
        """
        Max concurrent build.
        """
        return pulumi.get(self, "runner_max_concurrent_build")

    @runner_max_concurrent_build.setter
    def runner_max_concurrent_build(self, value: pulumi.Input[int]):
        pulumi.set(self, "runner_max_concurrent_build", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        The Subnet ID.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def cache(self) -> Optional[pulumi.Input['S3CacheArgs']]:
        return pulumi.get(self, "cache")

    @cache.setter
    def cache(self, value: Optional[pulumi.Input['S3CacheArgs']]):
        pulumi.set(self, "cache", value)

    @property
    @pulumi.getter(name="defaultDockerImage")
    def default_docker_image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_docker_image")

    @default_docker_image.setter
    def default_docker_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_docker_image", value)

    @property
    @pulumi.getter(name="gitlabHelperImage")
    def gitlab_helper_image(self) -> Optional[pulumi.Input[str]]:
        """
        Gitlab Runner helper image (default: gitlab-runner-helper:x86_64-latest).
        """
        return pulumi.get(self, "gitlab_helper_image")

    @gitlab_helper_image.setter
    def gitlab_helper_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gitlab_helper_image", value)

    @property
    @pulumi.getter(name="machineTags")
    def machine_tags(self) -> Optional[pulumi.Input['TagMapArgs']]:
        return pulumi.get(self, "machine_tags")

    @machine_tags.setter
    def machine_tags(self, value: Optional[pulumi.Input['TagMapArgs']]):
        pulumi.set(self, "machine_tags", value)

    @property
    @pulumi.getter(name="machineVolume")
    def machine_volume(self) -> Optional[pulumi.Input['VolumeArgsArgs']]:
        return pulumi.get(self, "machine_volume")

    @machine_volume.setter
    def machine_volume(self, value: Optional[pulumi.Input['VolumeArgsArgs']]):
        pulumi.set(self, "machine_volume", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input['TagMapArgs']]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input['TagMapArgs']]):
        pulumi.set(self, "tags", value)


class GitlabRunnerAwsa(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cache: Optional[pulumi.Input[pulumi.InputType['S3CacheArgs']]] = None,
                 default_docker_image: Optional[pulumi.Input[str]] = None,
                 gitlab_helper_image: Optional[pulumi.Input[str]] = None,
                 gitlab_runner_token: Optional[pulumi.Input[str]] = None,
                 gitlab_url: Optional[pulumi.Input[str]] = None,
                 machine_idle_nodes: Optional[pulumi.Input[int]] = None,
                 machine_idle_time_second: Optional[pulumi.Input[int]] = None,
                 machine_instance_type: Optional[pulumi.Input[str]] = None,
                 machine_max_builds: Optional[pulumi.Input[int]] = None,
                 machine_tags: Optional[pulumi.Input[pulumi.InputType['TagMapArgs']]] = None,
                 machine_volume: Optional[pulumi.Input[pulumi.InputType['VolumeArgsArgs']]] = None,
                 runner_max_concurrent_build: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[pulumi.InputType['TagMapArgs']]] = None,
                 __props__=None):
        """
        Create a GitlabRunnerAwsa resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] gitlab_helper_image: Gitlab Runner helper image (default: gitlab-runner-helper:x86_64-latest).
        :param pulumi.Input[str] gitlab_runner_token: The Gitlab Runner token.
        :param pulumi.Input[str] gitlab_url: The Gitlab URL.
        :param pulumi.Input[int] machine_idle_nodes: Number of iddle machines.
        :param pulumi.Input[int] machine_idle_time_second: Number of seconds a machine in idle mode after it's remove.
        :param pulumi.Input[str] machine_instance_type: Machine instance type.
        :param pulumi.Input[int] machine_max_builds: Maximum number of build a machine will run (machine is re-created after reach this number).
        :param pulumi.Input[int] runner_max_concurrent_build: Max concurrent build.
        :param pulumi.Input[str] subnet_id: The Subnet ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GitlabRunnerAwsaArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a GitlabRunnerAwsa resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param GitlabRunnerAwsaArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GitlabRunnerAwsaArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cache: Optional[pulumi.Input[pulumi.InputType['S3CacheArgs']]] = None,
                 default_docker_image: Optional[pulumi.Input[str]] = None,
                 gitlab_helper_image: Optional[pulumi.Input[str]] = None,
                 gitlab_runner_token: Optional[pulumi.Input[str]] = None,
                 gitlab_url: Optional[pulumi.Input[str]] = None,
                 machine_idle_nodes: Optional[pulumi.Input[int]] = None,
                 machine_idle_time_second: Optional[pulumi.Input[int]] = None,
                 machine_instance_type: Optional[pulumi.Input[str]] = None,
                 machine_max_builds: Optional[pulumi.Input[int]] = None,
                 machine_tags: Optional[pulumi.Input[pulumi.InputType['TagMapArgs']]] = None,
                 machine_volume: Optional[pulumi.Input[pulumi.InputType['VolumeArgsArgs']]] = None,
                 runner_max_concurrent_build: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[pulumi.InputType['TagMapArgs']]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GitlabRunnerAwsaArgs.__new__(GitlabRunnerAwsaArgs)

            __props__.__dict__["cache"] = cache
            __props__.__dict__["default_docker_image"] = default_docker_image
            __props__.__dict__["gitlab_helper_image"] = gitlab_helper_image
            if gitlab_runner_token is None and not opts.urn:
                raise TypeError("Missing required property 'gitlab_runner_token'")
            __props__.__dict__["gitlab_runner_token"] = gitlab_runner_token
            if gitlab_url is None and not opts.urn:
                raise TypeError("Missing required property 'gitlab_url'")
            __props__.__dict__["gitlab_url"] = gitlab_url
            if machine_idle_nodes is None and not opts.urn:
                raise TypeError("Missing required property 'machine_idle_nodes'")
            __props__.__dict__["machine_idle_nodes"] = machine_idle_nodes
            if machine_idle_time_second is None and not opts.urn:
                raise TypeError("Missing required property 'machine_idle_time_second'")
            __props__.__dict__["machine_idle_time_second"] = machine_idle_time_second
            if machine_instance_type is None and not opts.urn:
                raise TypeError("Missing required property 'machine_instance_type'")
            __props__.__dict__["machine_instance_type"] = machine_instance_type
            if machine_max_builds is None and not opts.urn:
                raise TypeError("Missing required property 'machine_max_builds'")
            __props__.__dict__["machine_max_builds"] = machine_max_builds
            __props__.__dict__["machine_tags"] = machine_tags
            __props__.__dict__["machine_volume"] = machine_volume
            if runner_max_concurrent_build is None and not opts.urn:
                raise TypeError("Missing required property 'runner_max_concurrent_build'")
            __props__.__dict__["runner_max_concurrent_build"] = runner_max_concurrent_build
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["gitlab_runner_user_data"] = None
        super(GitlabRunnerAwsa, __self__).__init__(
            'gitlab-runner-awsa:index:GitlabRunnerAwsa',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="gitlabRunnerUserData")
    def gitlab_runner_user_data(self) -> pulumi.Output[str]:
        """
        Gitlab Runner EC2 User Data
        """
        return pulumi.get(self, "gitlab_runner_user_data")

