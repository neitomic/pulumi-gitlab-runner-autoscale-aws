// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class GitlabRunnerAwsa extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'gitlab-runner-awsa:index:GitlabRunnerAwsa';

    /**
     * Returns true if the given object is an instance of GitlabRunnerAwsa.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GitlabRunnerAwsa {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GitlabRunnerAwsa.__pulumiType;
    }

    /**
     * Gitlab Runner EC2 User Data
     */
    public /*out*/ readonly gitlabRunnerUserData!: pulumi.Output<string>;

    /**
     * Create a GitlabRunnerAwsa resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GitlabRunnerAwsaArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.gitlabRunnerToken === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gitlabRunnerToken'");
            }
            if ((!args || args.gitlabUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gitlabUrl'");
            }
            if ((!args || args.machineIdleNodes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'machineIdleNodes'");
            }
            if ((!args || args.machineIdleTimeSecond === undefined) && !opts.urn) {
                throw new Error("Missing required property 'machineIdleTimeSecond'");
            }
            if ((!args || args.machineInstanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'machineInstanceType'");
            }
            if ((!args || args.machineMaxBuilds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'machineMaxBuilds'");
            }
            if ((!args || args.runnerMaxConcurrentBuild === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runnerMaxConcurrentBuild'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["cache"] = args ? args.cache : undefined;
            resourceInputs["defaultDockerImage"] = args ? args.defaultDockerImage : undefined;
            resourceInputs["gitlabHelperImage"] = args ? args.gitlabHelperImage : undefined;
            resourceInputs["gitlabRunnerToken"] = args ? args.gitlabRunnerToken : undefined;
            resourceInputs["gitlabUrl"] = args ? args.gitlabUrl : undefined;
            resourceInputs["machineIdleNodes"] = args ? args.machineIdleNodes : undefined;
            resourceInputs["machineIdleTimeSecond"] = args ? args.machineIdleTimeSecond : undefined;
            resourceInputs["machineInstanceType"] = args ? args.machineInstanceType : undefined;
            resourceInputs["machineMaxBuilds"] = args ? args.machineMaxBuilds : undefined;
            resourceInputs["machineTags"] = args ? args.machineTags : undefined;
            resourceInputs["machineVolume"] = args ? args.machineVolume : undefined;
            resourceInputs["runnerMaxConcurrentBuild"] = args ? args.runnerMaxConcurrentBuild : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["gitlabRunnerUserData"] = undefined /*out*/;
        } else {
            resourceInputs["gitlabRunnerUserData"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GitlabRunnerAwsa.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a GitlabRunnerAwsa resource.
 */
export interface GitlabRunnerAwsaArgs {
    cache?: pulumi.Input<inputs.S3CacheArgs>;
    defaultDockerImage?: pulumi.Input<string>;
    /**
     * Gitlab Runner helper image (default: gitlab-runner-helper:x86_64-latest).
     */
    gitlabHelperImage?: pulumi.Input<string>;
    /**
     * The Gitlab Runner token.
     */
    gitlabRunnerToken: pulumi.Input<string>;
    /**
     * The Gitlab URL.
     */
    gitlabUrl: pulumi.Input<string>;
    /**
     * Number of iddle machines.
     */
    machineIdleNodes: pulumi.Input<number>;
    /**
     * Number of seconds a machine in idle mode after it's remove.
     */
    machineIdleTimeSecond: pulumi.Input<number>;
    /**
     * Machine instance type.
     */
    machineInstanceType: pulumi.Input<string>;
    /**
     * Maximum number of build a machine will run (machine is re-created after reach this number).
     */
    machineMaxBuilds: pulumi.Input<number>;
    machineTags?: pulumi.Input<inputs.TagMapArgs>;
    machineVolume?: pulumi.Input<inputs.VolumeArgsArgs>;
    /**
     * Max concurrent build.
     */
    runnerMaxConcurrentBuild: pulumi.Input<number>;
    /**
     * The Subnet ID.
     */
    subnetId: pulumi.Input<string>;
    tags?: pulumi.Input<inputs.TagMapArgs>;
}
